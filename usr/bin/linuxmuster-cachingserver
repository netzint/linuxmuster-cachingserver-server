#!/usr/bin/env python3

#########################################################
# 
# by Netzint GmbH 2023
# Lukas Spitznagel (lukas.spitznagel@netzint.de)
# 
#########################################################

import argparse
import json
import random
import string
import socket
import requests

def register(name, ip, gateway, school):
    servers = json.load(open("/var/lib/linuxmuster-cachingserver/servers.json", "r"))
    if name not in servers:
        servers[name] = {
            "name": name,
            "ip": ip,
            "gateway": gateway,
            "school": school,
            "secret": ''.join(random.choices(string.ascii_uppercase + string.digits, k=50)),
            "images": []
        }
        with open("/var/lib/linuxmuster-cachingserver/servers.json", "w") as f:
            json.dump(servers, f, indent=4)

        servers[name]["server_ip"] = socket.gethostbyname(socket.gethostname())
        servers[name]["server_port"] = 4455
        servers[name]["server_name"] = socket.gethostname().split(".", 1)[0]
        servers[name]["server_domain"] = socket.gethostname().split(".", 1)[1]

        command = "linuxmuster-cachingserver setup "
        command += "--serverip " + servers[name]["server_ip"] + " "
        command += "--serverport " + str(servers[name]["server_port"]) + " "
        command += "--servername " + servers[name]["server_name"] + " "
        command += "--serverdomain " + servers[name]["server_domain"] + " "
        command += "--name " + servers[name]["name"] + " "
        command += "--ip " + servers[name]["ip"] + " "
        command += "--gateway " + servers[name]["gateway"] + " "
        command += "--school " + servers[name]["school"] + " "
        command += "--secret \"" + servers[name]["secret"] + "\""

        return { "status": True, "message": "Server added! Please run: %s" % command }
    else:
        return { "status": False, "message": "Server already exist!" }

def output(output, printjson=False):
    if printjson:
        print(json.dumps(output))
    else:
        if type(output) == list:
            for line in output:
                icon = "✅" if line["status"] else "❌"
                print(f"{icon} {line['message']}")
        else:
            icon = "✅" if line["status"] else "❌"
            print(f"{icon} {line['message']}")

def getRegisteredServers():
    file = open("/var/lib/linuxmuster-cachingserver/servers.json", "r")
    json_result = json.load(file)
    file.close()
    return json_result

def getIPFromCachingServer(server):
    servers = getRegisteredServers()
    return servers[server]["ip"]

def apiRequest(ip, url):
    try:
        request = requests.get(f"http://{ip}:4457/{url}")
        return request.json()
    except:
        return { "status": False, "data": None }

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", required=False, help="Print debug output", action="store_true")
    parser.add_argument("--json", required=False, help="Print output as json", action="store_true")

    subparsers = parser.add_subparsers(dest="command")
    parserRegister = subparsers.add_parser("register", help="Register a new caching server")
    parserRegister.add_argument("-n", "--name", required=True, help='Name of the cachingserver (hostname)')
    parserRegister.add_argument("-i", "--ip", required=True, help='IP of the cachingserver')
    parserRegister.add_argument("-g", "--gateway", required=True, help='Gateway of the cachingserver')
    parserRegister.add_argument("-s", "--school", required=True, help='School for the cachingserver')

    parserStatus = subparsers.add_parser("status", help="Status of caching server(s)")
    parserStatus.add_argument("-n", "--name", required=False, help='Name of the cachingserver (hostname)')

    parserSync = subparsers.add_parser("sync", help="Init sync for specific item on caching server(s)")
    parserSync.add_argument("-n", "--name", required=False, help='Name of the cachingserver (hostname)')
    parserSync.add_argument("-i", "--item", required=True, help='Item to initiate sync for')
    
    args = parser.parse_args()

    if not args.command:
        output({ "status": False, "message": "Command not set!" }, args.json)
        exit(1)

    if not args.json:
        print("""
=======================================================================
    _     ___ _   _ _   ___  ____  __ _   _ ____ _____ _____ ____  
   | |   |_ _| \ | | | | \ \/ /  \/  | | | / ___|_   _| ____|  _ \ 
   | |    | ||  \| | | | |\  /| |\/| | | | \___ \ | | |  _| | |_) |
   | |___ | || |\  | |_| |/  \| |  | | |_| |___) || | | |___|  _ < 
   |_____|___|_| \_|\___//_/\_\_|  |_|\___/|____/ |_| |_____|_| \_\ 


  Commandline-Tool to configure and manage LINUXMUSTER-Cachingserver!

=======================================================================
        """)
        print("You run command: " + args.command)

    if args.command == "register":
        result = register(args.name, args.ip, args.gateway, args.school)
        output(result, args.json)
    elif args.command == "status":
        if args.name:
            result = apiRequest(getIPFromCachingServer(args.name), "status")
            output(result, args.json)
        else:
            results = []
            for server in getRegisteredServers():
                result = apiRequest(getIPFromCachingServer(server), "status")
                results.append(result)
            output(results, args.json)

    elif args.command == "sync":
        result = apiRequest(getIPFromCachingServer(args.name), f"files/sync/{args.item}")
        output(result, args.json)

    else:
        output({ "status": False, "message": "No entry found for given parameters!" }, args.json)   

if __name__ == "__main__":
    main()